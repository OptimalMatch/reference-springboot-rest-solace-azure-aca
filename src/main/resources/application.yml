spring:
  application:
    name: solace-service
  jms:
    solace:
      enabled: ${SOLACE_ENABLED:false}
      host: ${SOLACE_HOST:tcp://localhost:55555}
      username: ${SOLACE_USERNAME:default}
      password: ${SOLACE_PASSWORD:default}
      vpn-name: ${SOLACE_VPN:default}
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

server:
  port: 8080
  tomcat:
    threads:
      max: 200        # Maximum number of worker threads
      min-spare: 10   # Minimum number of worker threads
    max-connections: 10000  # Maximum number of connections
    accept-count: 100  # Queue size for incoming connections

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.example.solaceservice: DEBUG
    com.solacesystems: INFO

solace:
  queue:
    name: ${SOLACE_QUEUE_NAME:test/topic}
    topic: ${SOLACE_TOPIC:test/topic}

azure:
  storage:
    enabled: ${AZURE_STORAGE_ENABLED:false}
    connection-string: ${AZURE_STORAGE_CONNECTION_STRING:}
    container-name: ${AZURE_STORAGE_CONTAINER_NAME:solace-messages}
    encryption:
      enabled: ${AZURE_STORAGE_ENCRYPTION_ENABLED:false}
      # Local mode for development/testing (no Key Vault required)
      local-mode: ${AZURE_STORAGE_ENCRYPTION_LOCAL_MODE:true}
      # Local encryption key (Base64-encoded 32-byte AES key)
      # Generate with: openssl rand -base64 32
      local-key: ${AZURE_STORAGE_ENCRYPTION_LOCAL_KEY:}

  keyvault:
    # For production with Azure Key Vault (when local-mode=false)
    uri: ${AZURE_KEYVAULT_URI:}
    key-name: ${AZURE_KEYVAULT_KEY_NAME:blob-encryption-key}

# Message transformation configuration
transformation:
  # Enable/disable transformation listener
  enabled: ${TRANSFORMATION_ENABLED:false}

  # Queue configuration
  input-queue: ${TRANSFORMATION_INPUT_QUEUE:swift/mt103/inbound}
  output-queue: ${TRANSFORMATION_OUTPUT_QUEUE:swift/mt202/outbound}

  # Transformation type (see TransformationType enum)
  transformation-type: ${TRANSFORMATION_TYPE:MT103_TO_MT202}

  # Storage
  store-results: ${TRANSFORMATION_STORE_RESULTS:true}