apiVersion: apps/v1
kind: Deployment
metadata:
  name: solace-service
  namespace: solace-service
  labels:
    app: solace-service
    version: v1
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: solace-service
  template:
    metadata:
      labels:
        app: solace-service
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      # Service account for pod identity (optional)
      # serviceAccountName: solace-service-sa

      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      containers:
      - name: solace-service
        image: solace-service:latest  # Update with your registry
        imagePullPolicy: IfNotPresent

        ports:
        - name: http
          containerPort: 8080
          protocol: TCP

        # Environment variables from ConfigMap
        envFrom:
        - configMapRef:
            name: solace-service-config
        - secretRef:
            name: solace-service-secret

        # Resource limits and requests
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "1000m"

        # Liveness probe - checks if the app is running
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3

        # Readiness probe - checks if the app is ready to serve traffic
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: http
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        # Startup probe - protects slow starting containers
        startupProbe:
          httpGet:
            path: /actuator/health/liveness
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 12  # 120 seconds to start

        # Security context for container
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL

        # Volume mounts (if needed)
        # volumeMounts:
        # - name: tmp
        #   mountPath: /tmp

      # Volumes (if needed)
      # volumes:
      # - name: tmp
      #   emptyDir: {}

      # Node affinity and tolerations (optional)
      # affinity:
      #   podAntiAffinity:
      #     preferredDuringSchedulingIgnoredDuringExecution:
      #     - weight: 100
      #       podAffinityTerm:
      #         labelSelector:
      #           matchExpressions:
      #           - key: app
      #             operator: In
      #             values:
      #             - solace-service
      #         topologyKey: kubernetes.io/hostname

      # Image pull secrets (if using private registry)
      # imagePullSecrets:
      # - name: registry-credentials
